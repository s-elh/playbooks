---
- hosts: all
  become: yes
  vars:
    edb_version: 17
    dns_server: 8.8.8.8

  pre_tasks:
    - name: Remove existing proxy configuration for Ubuntu
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/apt.conf.d/proxy.conf
        - /etc/environment
      when: ansible_os_family == "Debian"

    - name: Remove existing proxy configuration for RedHat
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/yum.conf
        - /etc/environment
      when: ansible_os_family == "RedHat"

    - name: Unset proxy environment variables
      lineinfile:
        path: /etc/environment
        state: absent
        regexp: "{{ item }}"
      loop:
        - '^HTTP_PROXY='
        - '^HTTPS_PROXY='
        - '^http_proxy='
        - '^https_proxy='

  tasks:
    # DNS configuration
    - name: Configure resolv.conf with Google DNS
      copy:
        content: "nameserver {{ dns_server }}\n"
        dest: /etc/resolv.conf
        mode: 0644

    # Ubuntu-specific tasks
    - name: Prepare APT for package installation (Ubuntu)
      block:
        - name: Clean APT lists
          command: rm -rf /var/lib/apt/lists/*
          when: ansible_os_family == "Debian"

        - name: Update APT cache forcefully
          apt:
            update_cache: yes
            force_apt_get: yes
          register: apt_update
          retries: 3
          delay: 5
          until: apt_update is success
          when: ansible_os_family == "Debian"
      when: ansible_os_family == "Debian"

    # RedHat-specific tasks
    - name: Prepare DNF for package installation (RedHat)
      block:
        - name: Clean DNF cache
          command: dnf clean all
          when: ansible_os_family == "RedHat"

        - name: Update DNF cache
          dnf:
            update_cache: yes
          register: dnf_update
          retries: 3
          delay: 5
          until: dnf_update is success
          when: ansible_os_family == "RedHat"
      when: ansible_os_family == "RedHat"

    # Install dependencies
    - name: Install core dependencies (Ubuntu)
      apt:
        pkg:
          - curl
          - gnupg
          - ca-certificates
          - apt-transport-https
        state: present
        force_apt_get: yes
      when: ansible_os_family == "Debian"

    - name: Install core dependencies (RedHat)
      dnf:
        pkg:
          - curl
          - gnupg
          - ca-certificates
        state: present
      when: ansible_os_family == "RedHat"

    # Download and execute repository setup script
    - name: Download EDB repository setup script (Ubuntu)
      get_url:
        url: "https://downloads.enterprisedb.com/ODhIpQiBGQejsnFtPvwMH6cslBPSS2V9/enterprise/setup.deb.sh"
        dest: /tmp/edb_setup.sh
        mode: 0755
        timeout: 60
      when: ansible_os_family == "Debian"

    - name: Download EDB repository setup script (RedHat)
      get_url:
        url: "https://downloads.enterprisedb.com/ODhIpQiBGQejsnFtPvwMH6cslBPSS2V9/enterprise/setup.rpm.sh"
        dest: /tmp/edb_setup.sh
        mode: 0755
        timeout: 60
      when: ansible_os_family == "RedHat"

    - name: Execute EDB repository setup script
      command: /tmp/edb_setup.sh
      args:
        creates: 
          - "/etc/apt/sources.list.d/edb.list"  # Ubuntu
          - "/etc/yum.repos.d/edb.repo"  # RedHat
      register: edb_repo_setup

    # Install EDB Advanced Server
    - name: Install EDB Advanced Server (Ubuntu)
      apt:
        name: "edb-as{{ edb_version }}-server"
        state: present
        force_apt_get: yes
      register: edb_install_ubuntu
      retries: 3
      delay: 5
      until: edb_install_ubuntu is success
      when: ansible_os_family == "Debian"

    - name: Install EDB Advanced Server (RedHat)
      dnf:
        name: "edb-as{{ edb_version }}-server"
        state: present
      register: edb_install_redhat
      retries: 3
      delay: 5
      until: edb_install_redhat is success
      when: ansible_os_family == "RedHat"

    - name: Remove temporary setup script
      file:
        path: /tmp/edb_setup.sh
        state: absent

  post_tasks:
    - name: Verify EDB installation
      command: psql -V
      register: psql_version
      changed_when: false
      ignore_errors: yes

    - name: Display EDB version
      debug:
        var: psql_version.stdout_lines
      when: psql_version.rc == 0
