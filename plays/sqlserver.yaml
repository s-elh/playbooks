---
- name: Install and Configure SQL Server
  hosts: all
  become: true
  gather_facts: true
  vars:
    proxy_url: "http://10.1.38.2:3128"
    sql_password: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomPassword'] | default('SqlServer2019!') }}"
    db_user: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomUser'] | default('') }}"
    db_name: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomName'] | default('') }}"
    rhel_username: "mmajnioui@powerm.ma"
    rhel_password: "{{ lookup('cypher','secret=secret/rhelpw') }}"
    ansible_remote_tmp: "/var/tmp/.ansible/tmp"

  tasks:
    # Common proxy configuration
    - name: Configure HTTP proxy for the environment
      lineinfile:
        path: /etc/environment
        line: '{{ item }}'
        create: yes
      with_items:
        - 'http_proxy={{ proxy_url }}'
        - 'https_proxy={{ proxy_url }}'
        - 'HTTP_PROXY={{ proxy_url }}'
        - 'HTTPS_PROXY={{ proxy_url }}'

    # Ubuntu-specific tasks
    - name: Configure HTTP proxy for apt
      when: ansible_distribution == "Ubuntu"
      copy:
        content: |
          Acquire::http::Proxy "{{ proxy_url }}";
          Acquire::https::Proxy "{{ proxy_url }}";
        dest: /etc/apt/apt.conf.d/95proxies

    - name: Handle package locks (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        systemctl stop unattended-upgrades
        systemctl disable unattended-upgrades
        killall unattended-upgrade-shutdown || true
        sleep 5
        rm -f /var/lib/dpkg/lock-frontend
        rm -f /var/lib/dpkg/lock
        rm -f /var/cache/apt/archives/lock
        rm -f /var/lib/apt/lists/lock
        dpkg --configure -a
      ignore_errors: yes

    - name: Download and install Heimdal dependencies (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        cd /tmp
        wget -O libasn1-8-heimdal.deb http://archive.ubuntu.com/ubuntu/pool/main/h/heimdal/libasn1-8-heimdal_7.7.0+dfsg-1ubuntu1_amd64.deb
        wget -O libhcrypto4-heimdal.deb http://archive.ubuntu.com/ubuntu/pool/main/h/heimdal/libhcrypto4-heimdal_7.7.0+dfsg-1ubuntu1_amd64.deb
        wget -O libheimntlm0-heimdal.deb http://archive.ubuntu.com/ubuntu/pool/main/h/heimdal/libheimntlm0-heimdal_7.7.0+dfsg-1ubuntu1_amd64.deb
        wget -O libkrb5-26-heimdal.deb http://archive.ubuntu.com/ubuntu/pool/main/h/heimdal/libkrb5-26-heimdal_7.7.0+dfsg-1ubuntu1_amd64.deb
        wget -O libroken18-heimdal.deb http://archive.ubuntu.com/ubuntu/pool/main/h/heimdal/libroken18-heimdal_7.7.0+dfsg-1ubuntu1_amd64.deb
        wget -O libgssapi3-heimdal.deb http://archive.ubuntu.com/ubuntu/pool/main/h/heimdal/libgssapi3-heimdal_7.7.0+dfsg-1ubuntu1_amd64.deb
        
        dpkg -i libroken18-heimdal.deb
        dpkg -i libasn1-8-heimdal.deb
        dpkg -i libhcrypto4-heimdal.deb
        dpkg -i libheimntlm0-heimdal.deb
        dpkg -i libkrb5-26-heimdal.deb
        dpkg -i libgssapi3-heimdal.deb
        
        apt-get -f install -y
      environment:
        http_proxy: "{{ proxy_url }}"
        https_proxy: "{{ proxy_url }}"
      ignore_errors: yes

    - name: Download and install libldap package (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        cd /tmp
        wget -O libldap-2.4-2.deb http://archive.ubuntu.com/ubuntu/pool/main/o/openldap/libldap-2.4-2_2.4.49+dfsg-2ubuntu1.10_amd64.deb
        dpkg -i libldap-2.4-2.deb
      environment:
        http_proxy: "{{ proxy_url }}"
        https_proxy: "{{ proxy_url }}"

    - name: Import Microsoft GPG key
      when: ansible_distribution == "Ubuntu"
      shell: |
        curl -x {{ proxy_url }} https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /etc/apt/trusted.gpg.d/microsoft.gpg

    - name: Add SQL Server repository
      when: ansible_distribution == "Ubuntu"
      shell: |
        curl -x {{ proxy_url }} https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/mssql-server-2022.list > /etc/apt/sources.list.d/mssql-server.list

    - name: Update apt cache
      when: ansible_distribution == "Ubuntu"
      apt:
        update_cache: yes

    - name: Install SQL Server
      when: ansible_distribution == "Ubuntu"
      shell: |
        ACCEPT_EULA=Y DEBIAN_FRONTEND=noninteractive apt-get install -y mssql-server

    - name: Configure system for SQL Server (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        # Stop SQL Server if running
        systemctl stop mssql-server || true
        
        # Create and set permissions for SQL Server directories
        mkdir -p /var/opt/mssql
        chown -R mssql:mssql /var/opt/mssql
        chmod -R 755 /var/opt/mssql
        
        # Configure system limits for SQL Server
        echo "mssql soft nofile 65535" > /etc/security/limits.d/mssql.conf
        echo "mssql hard nofile 65535" >> /etc/security/limits.d/mssql.conf
        echo "mssql soft nproc 4096" >> /etc/security/limits.d/mssql.conf
        echo "mssql hard nproc 4096" >> /etc/security/limits.d/mssql.conf
        
        # Reload system limits
        sysctl -p

    - name: Configure SQL Server (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        ACCEPT_EULA=Y MSSQL_SA_PASSWORD="{{ sql_password }}" MSSQL_PID=Express /opt/mssql/bin/mssql-conf setup

    - name: Start SQL Server service with delay
      when: ansible_distribution == "Ubuntu"
      shell: |
        systemctl daemon-reload
        systemctl enable mssql-server
        systemctl start mssql-server
        sleep 10

    # RHEL-specific tasks
    - name: Configure HTTP proxy for yum (RHEL)
      when: ansible_os_family == 'RedHat'
      lineinfile:
        path: /etc/yum.conf
        line: 'proxy={{ proxy_url }}'
        create: yes

    - name: Register and subscribe RHEL system
      when: ansible_os_family == 'RedHat'
      command: subscription-manager register --username {{ rhel_username }} --password {{ rhel_password }} --auto-attach
      register: subscription_result
      failed_when: subscription_result.rc != 0 and 'This system is already registered' not in subscription_result.stderr
      changed_when: subscription_result.rc == 0

    - name: Enable required RHEL repositories
      when: ansible_os_family == 'RedHat'
      command: subscription-manager repos --enable rhel-{{ ansible_distribution_major_version }}-for-x86_64-appstream-rpms
      register: repo_result
      failed_when: repo_result.rc != 0 and 'already enabled' not in repo_result.stderr
      changed_when: repo_result.rc == 0

    - name: Download SQL Server repository (RHEL)
      when: ansible_os_family == 'RedHat'
      get_url:
        url: https://packages.microsoft.com/config/rhel/8/mssql-server-2019.repo
        dest: /etc/yum.repos.d/mssql-server.repo
      environment:
        http_proxy: "{{ proxy_url }}"
        https_proxy: "{{ proxy_url }}"

    - name: Install SQL Server (RHEL)
      when: ansible_os_family == 'RedHat'
      yum:
        name: mssql-server
        state: present
        disable_gpg_check: yes
    
    - name: Configure system for SQL Server (RHEL)
      when: ansible_os_family == "RedHat"
      shell: |
        # Stop SQL Server if running
        systemctl stop mssql-server || true
        
        # Create and set permissions for SQL Server directories
        mkdir -p /var/opt/mssql
        chown -R mssql:mssql /var/opt/mssql
        chmod -R 755 /var/opt/mssql
        
        # Configure system limits for SQL Server
        echo "mssql soft nofile 65535" > /etc/security/limits.d/mssql.conf
        echo "mssql hard nofile 65535" >> /etc/security/limits.d/mssql.conf
        echo "mssql soft nproc 4096" >> /etc/security/limits.d/mssql.conf
        echo "mssql hard nproc 4096" >> /etc/security/limits.d/mssql.conf
        
        sysctl -p

    - name: Stop SQL Server before configuration (RHEL)
      when: ansible_os_family == "RedHat"
      systemd:
        name: mssql-server
        state: stopped

    - name: Configure SQL Server (RHEL)
      when: ansible_os_family == "RedHat"
      shell: |
        ACCEPT_EULA=Y MSSQL_SA_PASSWORD="{{ sql_password }}" MSSQL_PID=Express /opt/mssql/bin/mssql-conf setup

    - name: Start SQL Server (RHEL)
      when: ansible_os_family == "RedHat"
      systemd:
        name: mssql-server
        state: started
        enabled: yes

    # Ubuntu tools installation
    - name: Add Microsoft tools repository (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        curl -x {{ proxy_url }} https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list > /etc/apt/sources.list.d/msprod.list
      args:
        creates: /etc/apt/sources.list.d/msprod.list

    - name: Install MSSQL tools (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      apt:
        name: mssql-tools
        state: present
        update_cache: yes
      environment:
        ACCEPT_EULA: "Y"

    # RHEL tools installation
    - name: Install MSSQL tools repository (RHEL)
      when: ansible_os_family == "RedHat"
      shell: |
        curl -x {{ proxy_url }} https://packages.microsoft.com/config/rhel/8/prod.repo > /etc/yum.repos.d/msprod.repo
      args:
        creates: /etc/yum.repos.d/msprod.repo

    - name: Install MSSQL tools (RHEL)
      when: ansible_os_family == "RedHat"
      yum:
        name: mssql-tools
        state: present
        disable_gpg_check: yes
      environment:
        ACCEPT_EULA: "Y"

    # Add to PATH for both distributions
    - name: Add SQL tools to PATH
      lineinfile:
        path: /etc/profile.d/mssql-tools.sh
        line: 'export PATH="$PATH:/opt/mssql-tools/bin"'
        create: yes
        mode: '0644'

    # Final common tasks
    - name: Wait for SQL Server to start
      wait_for:
        port: 1433
        timeout: 300

    - name: Create database if db_name is provided
      when: db_name != ''
      shell: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "{{ sql_password }}" -Q "CREATE DATABASE {{ db_name }}"
      register: db_creation
      failed_when: db_creation.rc != 0 and 'already exists' not in db_creation.stderr

    - name: Create login and user if db_user is provided
      when: db_user != '' and db_name != ''
      shell: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "{{ sql_password }}" -Q "
        IF NOT EXISTS (SELECT * FROM sys.sql_logins WHERE name = '{{ db_user }}')
        BEGIN
          CREATE LOGIN {{ db_user }} WITH PASSWORD = '{{ sql_password }}';
        END;
        USE {{ db_name }};
        IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = '{{ db_user }}')
        BEGIN
          CREATE USER {{ db_user }} FOR LOGIN {{ db_user }};
          ALTER ROLE db_owner ADD MEMBER {{ db_user }};
        END;"
      register: user_creation
      failed_when: user_creation.rc != 0 and 'already exists' not in user_creation.stderr
