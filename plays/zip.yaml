---
- name: Install Java, SSH, and configure Hadoop user
  hosts: all
  become: yes
  become_method: sudo
  vars:
    hadoop_user: "hdoop"
    hadoop_full_name: "hadoop"
    hadoop_password: "hadoop"
    hadoop_version: "3.3.6"
    ansible_ssh_pipelining: true

  pre_tasks:
    - name: Create temporary directory for Ansible
      file:
        path: /tmp/ansible-{{ hadoop_user }}
        state: directory
        mode: '0777'
      become: yes

    - name: Install curl
      apt:
        name: curl
        state: present
      become: yes

  tasks:
    ## ðŸŸ¢ Step 1-4: [Previous tasks remain the same until download]

    ## ðŸŸ¢ Step 5: Download and Install Hadoop
    - name: Try downloading Hadoop with get_url
      get_url:
        url: "https://dlcdn.apache.org/hadoop/common/hadoop-{{ hadoop_version }}/hadoop-{{ hadoop_version }}.tar.gz"
        dest: "/home/{{ hadoop_user }}/hadoop-{{ hadoop_version }}.tar.gz"
        owner: "{{ hadoop_user }}"
        group: "{{ hadoop_user }}"
        timeout: 60
      become: yes
      become_user: "{{ hadoop_user }}"
      register: download_result
      ignore_errors: yes

    - name: Download Hadoop with curl if get_url failed
      shell: |
        curl -L "https://dlcdn.apache.org/hadoop/common/hadoop-{{ hadoop_version }}/hadoop-{{ hadoop_version }}.tar.gz" -o "/home/{{ hadoop_user }}/hadoop-{{ hadoop_version }}.tar.gz"
      become: yes
      become_user: "{{ hadoop_user }}"
      when: download_result is failed
      register: curl_result

    - name: Set proper ownership after curl download
      file:
        path: "/home/{{ hadoop_user }}/hadoop-{{ hadoop_version }}.tar.gz"
        owner: "{{ hadoop_user }}"
        group: "{{ hadoop_user }}"
      become: yes
      when: curl_result is changed

    - name: Verify file exists
      stat:
        path: "/home/{{ hadoop_user }}/hadoop-{{ hadoop_version }}.tar.gz"
      register: hadoop_file

    - name: Fail if download was unsuccessful
      fail:
        msg: "Failed to download Hadoop. Please check your internet connection and try again."
      when: not hadoop_file.stat.exists

    - name: Extract Hadoop archive
      unarchive:
        src: "/home/{{ hadoop_user }}/hadoop-{{ hadoop_version }}.tar.gz"
        dest: "/home/{{ hadoop_user }}"
        remote_src: yes
        owner: "{{ hadoop_user }}"
        group: "{{ hadoop_user }}"
      become: yes
      become_user: "{{ hadoop_user }}"

    ## [Rest of the tasks remain the same]
