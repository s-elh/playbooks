---
- name: Prepare Hadoop Installation
  hosts: all
  become: yes
  vars:
    hadoop_user: "hdoop"
    hadoop_group: "hadoopgroup"
    hadoop_home: "/home/hdoop"
    hadoop_version: "3.3.6"
    hadoop_url: "https://dlcdn.apache.org/hadoop/common/hadoop-{{ hadoop_version }}/hadoop-{{ hadoop_version }}.tar.gz"
    ansible_ssh_pipelining: true

  pre_tasks:
    - name: Ensure group exists
      group:
        name: "{{ hadoop_group }}"
        state: present

    - name: Create Hadoop user
      user:
        name: "{{ hadoop_user }}"
        group: "{{ hadoop_group }}"
        home: "{{ hadoop_home }}"
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Ensure user can use sudo without password
      lineinfile:
        path: /etc/sudoers.d/{{ hadoop_user }}
        line: "{{ hadoop_user }} ALL=(ALL) NOPASSWD:ALL"
        create: yes
        validate: 'visudo -cf %s'
        mode: 0440

  tasks:
    - name: Create Hadoop download directory
      file:
        path: "{{ hadoop_home }}/downloads"
        state: directory
        owner: "{{ hadoop_user }}"
        group: "{{ hadoop_group }}"
        mode: '0755'

    - name: Download Hadoop archive
      get_url:
        url: "{{ hadoop_url }}"
        dest: "{{ hadoop_home }}/downloads/hadoop-{{ hadoop_version }}.tar.gz"
        mode: '0644'
        timeout: 120
        validate_certs: yes
      register: download_result
      until: download_result is succeeded
      retries: 3
      delay: 5

    - name: Ensure correct ownership of download file
      file:
        path: "{{ hadoop_home }}/downloads/hadoop-{{ hadoop_version }}.tar.gz"
        owner: "{{ hadoop_user }}"
        group: "{{ hadoop_group }}"

    - name: Extract Hadoop archive
      unarchive:
        src: "{{ hadoop_home }}/downloads/hadoop-{{ hadoop_version }}.tar.gz"
        dest: "{{ hadoop_home }}"
        remote_src: yes
        owner: "{{ hadoop_user }}"
        group: "{{ hadoop_group }}"

    - name: Verify Hadoop installation
      stat:
        path: "{{ hadoop_home }}/hadoop-{{ hadoop_version }}"
      register: hadoop_dir

    - name: Ensure correct ownership of Hadoop directory
      file:
        path: "{{ hadoop_home }}/hadoop-{{ hadoop_version }}"
        owner: "{{ hadoop_user }}"
        group: "{{ hadoop_group }}"
        recurse: yes
        state: directory

    - name: Fail if Hadoop directory does not exist
      fail:
        msg: "Hadoop installation failed - directory not found"
      when: not hadoop_dir.stat.exists
