---
- name: Install and Configure MariaDB
  hosts: all
  become: true
  gather_facts: true
  vars:
    proxy_url: "http://10.1.38.2:3128"
    mysql_root_password: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomPassword'] | default('rootroot') }}"
    db_password: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomPassword'] | default('') }}"
    db_user: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomUser'] | default('') }}"
    db_name: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomName'] | default('') }}"
    db_vars_provided: false
    rhel_username: "mmajnioui@powerm.ma"
    rhel_password: "{{ lookup('cypher','secret=secret/rhelpw') }}"
    ansible_remote_tmp: "/var/tmp/.ansible/tmp"

  tasks:
    - name: Ensure Ansible remote tmp directory exists and is writable
      file:
        path: "{{ ansible_remote_tmp }}"
        state: directory
        mode: '1777'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      become: true

    - name: Check if database variables are provided
      set_fact:
        db_vars_provided: true
      when: 
        - db_password != ''
        - db_user != ''
        - db_name != ''

    # Ubuntu-specific tasks
    - name: Configure HTTP proxy for apt (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      copy:
        content: |
          Acquire::http::Proxy "{{ proxy_url }}";
          Acquire::https::Proxy "{{ proxy_url }}";
        dest: /etc/apt/apt.conf.d/95proxies

    - name: Install required packages (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      apt:
        name: 
          - software-properties-common
          - python3-pymysql
          - curl
          - gnupg2
        state: present
        update_cache: yes

    - name: Add MariaDB Repository Key (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        curl -x {{ proxy_url }} -fsSL https://mirror.marwan.ma/mariadb/MariaDB-Server-11.2/repo/ubuntu/dpidgpkey.asc | gpg --dearmor -o /etc/apt/trusted.gpg.d/mariadb.gpg
      args:
        creates: /etc/apt/trusted.gpg.d/mariadb.gpg

    - name: Add MariaDB Repository (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      shell: |
        echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/mariadb.gpg] https://mirror.marwan.ma/mariadb/repo/11.2/ubuntu jammy main" > /etc/apt/sources.list.d/mariadb.list

    - name: Update apt cache (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      apt:
        update_cache: yes

    - name: Install MariaDB (Ubuntu)
      when: ansible_distribution == "Ubuntu"
      apt:
        name: 
          - mariadb-server
          - mariadb-client
        state: present

    # RHEL-specific tasks
    - name: Configure HTTP proxy for yum (RHEL)
      when: ansible_os_family == 'RedHat'
      lineinfile:
        path: /etc/yum.conf
        line: 'proxy={{ proxy_url }}'
        create: yes

    - name: Configure HTTP proxy for the environment (All OS)
      lineinfile:
        path: /etc/environment
        line: '{{ item }}'
        create: yes
      with_items:
        - 'http_proxy={{ proxy_url }}'
        - 'https_proxy={{ proxy_url }}'
        - 'HTTP_PROXY={{ proxy_url }}'
        - 'HTTPS_PROXY={{ proxy_url }}'

    - name: Register and subscribe RHEL system
      when: ansible_os_family == 'RedHat'
      command: subscription-manager register --username {{ rhel_username }} --password {{ rhel_password }} --auto-attach
      register: subscription_result
      failed_when: subscription_result.rc != 0 and 'This system is already registered' not in subscription_result.stderr
      changed_when: subscription_result.rc == 0

    - name: Enable required RHEL repositories
      when: ansible_os_family == 'RedHat'
      command: subscription-manager repos --enable rhel-{{ ansible_distribution_major_version }}-for-x86_64-appstream-rpms
      register: repo_result
      failed_when: repo_result.rc != 0 and 'already enabled' not in repo_result.stderr
      changed_when: repo_result.rc == 0

    - name: Download MariaDB repo setup script (RHEL)
      when: ansible_os_family == 'RedHat'
      get_url:
        url: https://downloads.mariadb.com/MariaDB/mariadb_repo_setup
        dest: /tmp/mariadb_repo_setup
        mode: '0755'
      environment:
        http_proxy: "{{ proxy_url }}"
        https_proxy: "{{ proxy_url }}"

    - name: Execute MariaDB repo setup script (RHEL)
      when: ansible_os_family == 'RedHat'
      command: /tmp/mariadb_repo_setup
      args:
        creates: /etc/yum.repos.d/mariadb.repo

    - name: Install MariaDB dependencies (RHEL)
      when: ansible_os_family == 'RedHat'
      yum:
        name:
          - perl-DBI
          - libaio
          - libsepol
          - lsof
          - boost-program-options
          - python3-PyMySQL
        state: present
        update_cache: yes

    - name: Install MariaDB server (RHEL)
      when: ansible_os_family == 'RedHat'
      yum:
        name: mariadb-server
        state: present
        update_cache: yes

    - name: Initialize MariaDB data directory (RHEL)
      when: ansible_os_family == 'RedHat'
      command: mysql_install_db
      args:
        creates: /var/lib/mysql/mysql
      register: mysql_init
      changed_when: mysql_init.rc == 0

    # Common tasks for both distributions
    - name: Enable and start MariaDB service
      systemd:
        name: mariadb
        enabled: yes
        state: started

    - name: Set MariaDB root password
      shell: |
        mysql --user=root --execute="ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_password }}'; FLUSH PRIVILEGES;"
      ignore_errors: true

    - name: Remove anonymous users
      shell: |
        mysql --user=root --password="{{ mysql_root_password }}" --execute="DELETE FROM mysql.user WHERE User=''; FLUSH PRIVILEGES;"

    - name: Remove test database
      shell: |
        mysql --user=root --password="{{ mysql_root_password }}" --execute="DROP DATABASE IF EXISTS test; DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'; FLUSH PRIVILEGES;"

    - name: Create database if variables are provided
      when: db_vars_provided
      shell: |
        mysql --user=root --password="{{ mysql_root_password }}" --execute="CREATE DATABASE IF NOT EXISTS {{ db_name }};"

    - name: Create user and grant privileges if variables are provided
      when: db_vars_provided
      shell: |
        mysql --user=root --password="{{ mysql_root_password }}" --execute="CREATE USER IF NOT EXISTS '{{ db_user }}'@'%' IDENTIFIED BY '{{ db_password }}'; GRANT ALL PRIVILEGES ON {{ db_name }}.* TO '{{ db_user }}'@'%'; FLUSH PRIVILEGES;"

    - name: Print status of MariaDB setup
      debug:
        msg: "MariaDB setup completed with user {{ db_user }} and database {{ db_name }}"
      when: db_vars_provided
