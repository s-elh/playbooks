---
- name: Install and configure PostgreSQL
  hosts: all
  become: true
  vars:
    postgresql_version: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['version'] }}"
    postgresql_service: postgresql
    postgres_password: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomPassword'] }}"
    db_user: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomUser'] }}"
    db_name: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomName'] }}"
    db_vars_provided: false

  pre_tasks:
    - name: Ensure apt cache is clean
      when: ansible_facts['os_family'] == 'Debian'
      command: rm -rf /var/lib/apt/lists/*
      changed_when: false

    - name: Wait for apt lock release
      when: ansible_facts['os_family'] == 'Debian'
      shell: while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 1; done
      changed_when: false
      
  tasks:
    - name: Check if database variables are provided
      set_fact:
        db_vars_provided: true
      when: 
        - db_user != ''
        - postgres_password != ''
        - db_name != ''

    - name: Print the ansible_os_family fact
      ansible.builtin.debug:
        msg: "The OS family is: {{ ansible_os_family }}"

    - name: Install prerequisites for PostgreSQL on Debian/Ubuntu
      when: ansible_facts['os_family'] == 'Debian'
      block:
        - name: Update apt cache first
          apt:
            update_cache: yes
            cache_valid_time: 3600
          register: apt_update
          retries: 5
          delay: 10
          until: apt_update is success

        - name: Install required packages
          apt:
            name: 
              - curl
              - ca-certificates
              - gnupg
              - lsb-release
            state: present
          register: pkg_install
          retries: 3
          delay: 5
          until: pkg_install is success

    - name: Create directory for PostgreSQL keys
      when: ansible_facts['os_family'] == 'Debian'
      file:
        path: /usr/share/postgresql-common/pgdg
        state: directory
        mode: '0755'

    - name: Download PostgreSQL GPG key using curl
      when: ansible_facts['os_family'] == 'Debian'
      shell: |
        curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
      args:
        warn: false
      register: gpg_key
      retries: 3
      delay: 5
      until: gpg_key is success

    - name: Add PostgreSQL repository for Debian/Ubuntu
      when: ansible_facts['os_family'] == 'Debian'
      shell: |
        echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
      register: repo_add

    - name: Update apt cache after adding repository
      when: ansible_facts['os_family'] == 'Debian' and repo_add is changed
      apt:
        update_cache: yes
      register: final_update
      retries: 5
      delay: 10
      until: final_update is success

    - name: Install PostgreSQL for Ubuntu
      when: ansible_facts['os_family'] == 'Debian'
      apt:
        name:
          - "postgresql-{{ postgresql_version }}"
          - python3-psycopg2
        state: present
      register: postgres_install
      retries: 3
      delay: 5
      until: postgres_install is success

    - name: Ensure PostgreSQL service is running and enabled
      when: ansible_facts['os_family'] == 'Debian'
      systemd:
        name: postgresql
        enabled: yes
        state: started
      register: postgres_service

    - name: Collect PostgreSQL version and extensions
      shell: |
        sudo -u postgres psql -c "SELECT version();"
        sudo -u postgres psql -c "SELECT * FROM pg_extension;"
      register: postgres_info

    - name: Debug PostgreSQL info
      debug:
        msg: "PostgreSQL information: {{ postgres_info.stdout_lines }}"

    - name: Create PostgreSQL user if variables are provided
      when: db_vars_provided
      shell: |
        sudo -u postgres psql -c "CREATE USER {{ db_user }} WITH PASSWORD '{{ postgres_password }}';"
      register: create_user_result

    - name: Create a new database if variables are provided
      when: db_vars_provided
      shell: |
        sudo -u postgres psql -c "CREATE DATABASE {{ db_name }} OWNER {{ db_user }};"

    - name: Debug user creation result if variables are provided
      when: db_vars_provided
      debug:
        msg: "User creation result: {{ create_user_result }}"

    - name: Skip database setup if credentials are not provided
      debug:
        msg: "Database credentials not provided; skipping database and user creation."
      when: not db_vars_provided
