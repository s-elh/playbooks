---
- name: Install and configure PostgreSQL
  hosts: all
  become: true
  vars:
    postgresql_version: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['version'] }}"
    postgres_password: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomPassword'] }}"
    db_user: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomUser'] }}"
    db_name: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomName'] }}"
    db_vars_provided: false  # Set to true if db_name and db_user are provided

  tasks:
    - name: Install prerequisites
      apt:
        name:
          - curl
          - ca-certificates
          - gnupg
          - lsb-release
        state: present
      when: ansible_os_family == 'Debian'

    - name: Add PostgreSQL APT repository key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present
      when: ansible_os_family == 'Debian'

    - name: Add PostgreSQL APT repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_lsb.codename }}-pgdg main"
        state: present
      when: ansible_os_family == 'Debian'

    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'

    - name: Install PostgreSQL
      apt:
        name: "postgresql-{{ postgresql_version }}"
        state: present
      when: ansible_os_family == 'Debian'

    - name: Ensure PostgreSQL is started and enabled
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Set PostgreSQL password for 'postgres' user
      become_user: postgres
      postgresql_user:
        name: postgres
        password: "{{ postgres_password }}"
        role_attr_flags: "SUPERUSER"
      when: postgres_password is defined

    - name: Create database
      become_user: postgres
      postgresql_db:
        name: "{{ db_name }}"
      when: db_vars_provided

    - name: Create database user
      become_user: postgres
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ postgres_password }}"
        priv: "{{ db_name }}:ALL"
      when: db_vars_provided

    - name: Grant all privileges on database to user
      become_user: postgres
      postgresql_privs:
        db: "{{ db_name }}"
        roles: "{{ db_user }}"
        type: database
        privs: ALL
      when: db_vars_provided
