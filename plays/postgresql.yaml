---
- name: Install and configure PostgreSQL
  hosts: all
  become: true
  vars:
    proxy_url: "http://10.1.38.2:3128"
    postgres_password: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomPassword'] }}"
    db_user: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomUser'] }}"
    db_name: "{{ hostvars[inventory_hostname]['morpheus']['customOptions']['dbCustomName'] }}"
    sudo_password: "<%=cypher.read('secret/pw')%>"
    db_vars_provided: false
    rhel_username: "mmajnioui@powerm.ma"
    rhel_password: "{{ lookup('cypher','secret=secret/rhelpw') }}"
    ansible_remote_tmp: "/tmp/.ansible/tmp"

  tasks:
    - name: Get RHEL major version
      when: ansible_os_family == 'RedHat'
      set_fact:
        rhel_major_version: "{{ ansible_distribution_major_version }}"

    - name: Configure HTTP proxy for yum (RHEL)
      lineinfile:
        path: /etc/yum.conf
        line: 'proxy={{ proxy_url }}'
        create: yes
      when: ansible_os_family == 'RedHat'

    - name: Configure HTTP proxy for the environment
      lineinfile:
        path: /etc/environment
        line: '{{ item }}'
        create: yes
      with_items:
        - 'http_proxy={{ proxy_url }}'
        - 'https_proxy={{ proxy_url }}'
        - 'HTTP_PROXY={{ proxy_url }}'
        - 'HTTPS_PROXY={{ proxy_url }}'

    # RHEL-specific tasks
    - name: Register and subscribe RHEL system
      when: ansible_os_family == 'RedHat'
      command: subscription-manager register --username {{ rhel_username }} --password {{ rhel_password }} --auto-attach
      register: subscription_result
      failed_when: subscription_result.rc != 0 and 'This system is already registered' not in subscription_result.stderr
      changed_when: subscription_result.rc == 0

    - name: Enable required RHEL repositories
      when: ansible_os_family == 'RedHat'
      command: subscription-manager repos --enable rhel-{{ rhel_major_version }}-for-x86_64-appstream-rpms
      register: repo_result
      failed_when: repo_result.rc != 0 and 'already enabled' not in repo_result.stderr
      changed_when: repo_result.rc == 0

    # PostgreSQL installation and configuration for RHEL
    - name: Install PostgreSQL server (RHEL)
      yum:
        name: "@postgresql"
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Initialize PostgreSQL database (RHEL only)
      command: "/usr/bin/postgresql-setup --initdb"
      args:
        creates: "/var/lib/pgsql/data/postgresql.conf"
      when: ansible_os_family == 'RedHat'

    - name: Ensure PostgreSQL is started and enabled (RHEL)
      service:
        name: postgresql
        state: started
        enabled: yes
      when: ansible_os_family == 'RedHat'

    - name: Check if database variables are provided
      set_fact:
        db_vars_provided: true
      when: 
        - db_user != ''
        - postgres_password != ''
        - db_name != ''

    - name: Set PostgreSQL password for postgres user
      when: postgres_password is defined
      shell: |
        PGPASSWORD="{{ sudo_password }}" sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '{{ postgres_password }}';"
      register: set_postgres_password

    - name: Create database user
      when: db_vars_provided
      shell: |
        PGPASSWORD="{{ sudo_password }}" sudo -u postgres psql -c "CREATE USER {{ db_user }} WITH PASSWORD '{{ postgres_password }}';"
      register: create_user_result
      ignore_errors: yes

    - name: Create database
      when: db_vars_provided
      shell: |
        PGPASSWORD="{{ sudo_password }}" sudo -u postgres psql -c "CREATE DATABASE {{ db_name }} OWNER {{ db_user }};"
      register: create_db_result
      ignore_errors: yes

    - name: Grant privileges
      when: db_vars_provided
      shell: |
        PGPASSWORD="{{ sudo_password }}" sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ db_name }} TO {{ db_user }};"
      register: grant_privileges

    - name: Debug database setup results
      when: db_vars_provided
      debug:
        msg: 
          - "User creation: {{ create_user_result.stdout | default('No output') }}"
          - "Database creation: {{ create_db_result.stdout | default('No output') }}"
          - "Privilege grant: {{ grant_privileges.stdout | default('No output') }}"
