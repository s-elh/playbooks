---
- name: Install Kubernetes using kURL
  hosts: k8s_nodes
  become: true
  vars:
    kurl_script_url: "https://kurl.sh/f2e5eda"
    min_memory_mb: 4096
    min_cpu_count: 2
    min_disk_gb: 20

  tasks:
    - name: Gather system facts
      setup:
        gather_subset:
          - hardware
          - virtual

    - name: Check system requirements
      assert:
        that:
          - ansible_memtotal_mb >= min_memory_mb
          - ansible_processor_vcpus >= min_cpu_count
          - ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_total') | list | first >= min_disk_gb * 1024 * 1024 * 1024
        fail_msg: "System does not meet minimum requirements. Need 4GB RAM, 2 CPUs, and 20GB disk space."
        success_msg: "System meets minimum requirements"

    - name: Check if SELinux is installed
      stat:
        path: /etc/selinux/config
      register: selinux_config

    - name: Disable SELinux if present
      shell: |
        setenforce 0 || true
        sed -i 's/^SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config || true
      when: selinux_config.stat.exists
      ignore_errors: yes

    - name: Install system prerequisites
      package:
        name:
          - curl
          - sudo
          - tar
          - gzip
          - openssl
          - ca-certificates
          - python3
          - iptables
          - ntp
          - chrony
        state: present
      register: pkg_result
      retries: 3
      delay: 5
      until: pkg_result is success

    - name: Check firewalld status
      command: systemctl status firewalld
      register: firewalld_status
      failed_when: false
      changed_when: false

    - name: Stop and disable firewalld if present
      systemd:
        name: firewalld
        state: stopped
        enabled: no
      when: firewalld_status.rc == 0
      ignore_errors: yes

    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Remove swap from fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Set system parameters for Kubernetes
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
        reload: yes
      with_items:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
      ignore_errors: yes

    - name: Create temporary directory for kURL script
      file:
        path: /tmp/kurl
        state: directory
        mode: '0755'

    - name: Ensure full internet connectivity
      command: curl -s --connect-timeout 5 https://kurl.sh
      register: connectivity_check
      ignore_errors: yes

    - name: Display connectivity check result
      debug:
        var: connectivity_check

    - name: Download kURL installation script
      get_url:
        url: "{{ kurl_script_url }}"
        dest: /tmp/kurl/install.sh
        mode: '0755'
        validate_certs: yes
        force: yes
      register: download_script
      retries: 3
      delay: 5
      until: download_script is success

    - name: Create installation log directory
      file:
        path: /var/log/kurl
        state: directory
        mode: '0755'

    - name: Run kURL installation script with verbose output
      shell: |
        set -x
        cd /tmp/kurl
        KURL_VERBOSE=1 bash ./install.sh 2>&1 | tee /var/log/kurl/installation.log
      args:
        executable: /bin/bash
        chdir: /tmp/kurl
      register: kurl_installation
      failed_when: false

    - name: Display installation output
      debug:
        var: kurl_installation.stdout_lines
      when: kurl_installation.stdout is defined

    - name: Display installation errors
      debug:
        var: kurl_installation.stderr_lines
      when: kurl_installation.stderr is defined

    - name: Check installation logs for specific errors
      shell: |
        grep -i "error\|failed\|fatal" /var/log/kurl/installation.log || true
      register: error_check
      changed_when: false

    - name: Display specific errors found
      debug:
        var: error_check.stdout_lines
      when: error_check.stdout_lines is defined and error_check.stdout_lines | length > 0

    - name: Collect system diagnostics
      shell: |
        echo "=== System Information ==="
        uname -a
        echo "=== Memory Information ==="
        free -m
        echo "=== Disk Information ==="
        df -h
        echo "=== Network Information ==="
        ip addr show
        echo "=== Process Information ==="
        ps aux | grep -i kube
        echo "=== Service Status ==="
        systemctl status kubelet || true
      register: system_diagnostics
      when: kurl_installation.rc != 0

    - name: Display system diagnostics
      debug:
        var: system_diagnostics.stdout_lines
      when: system_diagnostics is defined and system_diagnostics.stdout_lines is defined

    - name: Verify final installation
      command: which kubectl
      register: final_check
      changed_when: false
      failed_when: false

    - name: Fail with detailed error message
      fail:
        msg: |
          Kubernetes installation failed. 
          Please check:
          1. System requirements (4GB RAM, 2 CPUs, 20GB disk)
          2. Network connectivity
          3. Installation logs at /var/log/kurl/installation.log
          4. System diagnostics above
      when: final_check.rc != 0
