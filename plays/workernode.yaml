---
- name: Install Kubernetes using kURL
  hosts: k8s_nodes
  become: true
  vars:
    kurl_script_url: "https://kurl.sh/f2e5eda"

  pre_tasks:
    - name: Update apt cache (Debian/Ubuntu)
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"
      ignore_errors: yes

    - name: Update yum cache (RedHat/CentOS)
      yum:
        update_cache: yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

  tasks:
    - name: Install system prerequisites
      package:
        name:
          - curl
          - sudo
          - tar
          - gzip
          - openssl
          - ca-certificates
          - python3
          - iptables
          - selinux-utils
        state: present
      register: pkg_result
      retries: 3
      delay: 5
      until: pkg_result is success

    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Remove swap from fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Create temporary directory for kURL script
      file:
        path: /tmp/kurl
        state: directory
        mode: '0755'

    - name: Download kURL installation script
      get_url:
        url: "{{ kurl_script_url }}"
        dest: /tmp/kurl/install.sh
        mode: '0755'
        validate_certs: yes
        force: yes
      register: download_script
      retries: 3
      delay: 5
      until: download_script is success

    - name: Verify script download
      stat:
        path: /tmp/kurl/install.sh
      register: script_check
      failed_when: not script_check.stat.exists

    - name: Create installation log directory
      file:
        path: /var/log/kurl
        state: directory
        mode: '0755'

    - name: Run kURL installation script with detailed logging
      shell: |
        set -x
        cd /tmp/kurl
        bash ./install.sh 2>&1 | tee /var/log/kurl/installation.log
      args:
        executable: /bin/bash
        chdir: /tmp/kurl
      register: kurl_installation
      failed_when: false

    - name: Display installation output
      debug:
        var: kurl_installation.stdout_lines
      when: kurl_installation.stdout is defined

    - name: Display installation errors
      debug:
        var: kurl_installation.stderr_lines
      when: kurl_installation.stderr is defined

    - name: Verify kubectl installation
      shell: |
        which kubectl || echo "kubectl not found"
        ls -l /usr/local/bin/kubectl || echo "not in /usr/local/bin"
        ls -l /usr/bin/kubectl || echo "not in /usr/bin"
      register: kubectl_check
      changed_when: false

    - name: Display kubectl installation status
      debug:
        var: kubectl_check.stdout_lines

    - name: Add kubectl to PATH if exists in alternate location
      shell: |
        if [ -f /usr/local/bin/kubectl ]; then
          ln -sf /usr/local/bin/kubectl /usr/bin/kubectl
        fi
      when: kubectl_check.stdout is defined and 'not in /usr/bin' in kubectl_check.stdout

    - name: Verify final kubectl availability
      command: which kubectl
      register: final_kubectl_check
      changed_when: false
      failed_when: false

    - name: Check kubernetes node status
      shell: |
        export PATH=$PATH:/usr/local/bin:/usr/bin
        kubectl get nodes
      register: node_status
      changed_when: false
      failed_when: false
      when: final_kubectl_check.rc == 0

    - name: Display node status
      debug:
        var: node_status.stdout_lines
      when: node_status is defined and node_status.stdout_lines is defined

    - name: Collect installation diagnostics on failure
      shell: |
        echo "=== System Info ==="
        uname -a
        echo "=== Directory Listing ==="
        ls -la /usr/bin/kubectl* /usr/local/bin/kubectl* 2>/dev/null || echo "No kubectl found"
        echo "=== Installation Log Excerpt ==="
        tail -n 50 /var/log/kurl/installation.log
      register: diagnostics
      when: final_kubectl_check.rc != 0

    - name: Display diagnostics
      debug:
        var: diagnostics.stdout_lines
      when: diagnostics is defined and diagnostics.stdout_lines is defined

    - name: Fail if installation verification failed
      fail:
        msg: "Kubernetes installation failed. Check the installation logs and diagnostics above."
      when: final_kubectl_check.rc != 0
